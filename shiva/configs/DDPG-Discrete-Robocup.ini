; Test config
; NOTE: options within sections cannot have the same names
; some options are repeating, we need to get rid of duplicates
[MetaLearner]
type='SingleAgentMetaLearner'
start_mode="production"
optimize_env_hp=False
optimize_learner_hp=False
evolution=False
seeds = [0,1,2,3,4]
start_port=1050

[Learner]
type='SingleAgentLearner'
using_buffer=True
episodes= 15250
; episodes=1
save_checkpoint_episodes=1000
; metrics =  ["Reward", "LossPerStep", "TotalReward"]
; load_agents='runs/DDPGAlgorithm-RoboCup-01-19-15:59/L0/Ep15001'
load_agents = False
manual_play = False
action_selection_method='argmax'

[Algorithm]
algorithm='DDPG'
type="DDPGAlgorithm"
a_space="discrete"
manual_seed = 50
replay_buffer=True
loss_function='MSELoss'
regularizer=0
recurrence=0
gamma=0.99
tau=0.0001
; c=200
; epsilon_start=1
; epsilon_end=0.02
; epsilon_decay=0.00005


[Environment]
type='RoboCupEnvironment'
env_name='RoboCup'
ang_coef = 45
pow_coef = 5
; action_space='discrete'
port=45000
seed=0
run_imit=False
; action level
action_level = 'discretized'
; feature level
feature_level = 'low'
env_render = False
rcss_log = False
hfo_log = False
num_ep = 100
ep_length = 500
untouched = 200
determ = True
burn_in = 500
record_lib = False
record_serv = False
num_left = 1
num_right = 0
num_l_bot = 0
num_r_bot = 0
left_bin = 'helios10'
right_bin = 'helios11'
goalie = False
; per episode
reward_anneal = 1_000_000
offense_ball = 0
sync_mode = True
fullstate = True
verbose = False
log = 'log'
; Ball position
ball_x_min = .8
ball_x_max = .8
ball_y_min = 0.0
ball_y_max = 0.0
; Agent Positions
agents_x_min=.8
agents_x_max=.8
agents_y_min=0
agents_y_max=0
; Change Positions
change_ball_x=0.00
change_ball_y=0.00
change_agents_x=0.00
change_agents_y=0.00
change_every_x=300
init_env = True

[Agent]
optimizer_function='Adam'
actor_learning_rate=0.001
critic_learning_rate=0.01
exploration_steps=3000
exploration_noise=0.9
training_noise=0
action_space='discrete'

[Network]
actor = {'layers': [512, 256, 128], 'activation_function': ['ReLU','ReLU','ReLU'], 'output_function': None, 'last_layer': True}
critic = {'layers': [512, 256, 128], 'activation_function': ['ReLU','ReLU', 'ReLU'], 'output_function': None, 'last_layer': True}


; [Evaluation]
; env_type =          "Gym"
; environment =       ["CartPole-v1"]
; episodes =          10
; load_path =         ["runs/ML-Gym-CartPole-v1-10-20-20:07/", "runs/ML-Gym-CartPole-v1-10-20-20:09/", "runs/ML-Gym-CartPole-v1-10-20-20:48/"]
; metrics =           ["AveRewardPerEpisode", "MaxEpisodicReward", "MinEpisodicReward", "AveStepsPerEpisode"]
; env_render =        True

[Buffer]
type='TensorBuffer'
capacity=1_000_000
batch_size=320

[Admin]
save =              True
traceback =         True
directory = {'runs': '/runs'}

[ImageProcessing]

[VideoProcessing]