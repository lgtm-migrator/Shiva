; Test config for DQN
; NOTE: options within sections cannot have the same names

[MetaLearner]
type='SingleAgentMetaLearner'
start_mode="production"
optimize_env_hp=False
optimize_learner_hp=False
evolution=False

[Learner]
type='SingleAgentDQNLearner'
using_buffer=True
episodes=10000
load_agents=False
; load_agents = 'runs/ML-Basic-11-29-03:20'
save_checkpoint_episodes = 10

[Algorithm]
type='DQNAlgorithm'
manual_seed = 50
exploration_steps=1
replay_buffer=True
loss_function='MSELoss'
regularizer=0
recurrence=False
gamma=0.99
beta=0
epsilon_start=1
epsilon_end=0.02
epsilon_decay=0.00005
c=200


; This would need to change a lot
; Maybe make a dummy environment
[Environment]
type='UnityWrapperEnvironment'
exec='shiva/envs/unitybuilds/3DBall-12.1_Mac/3DBall.app'
env_name='3DBall'
train_mode = True
reset_params = {}
render=True

num_agents=1
port=12345
normalize=False
b=1
a=-1
min=-1
max=100

[Buffer]
type='SimpleBuffer'
capacity=12000
batch_size = 64
num_agents=1

[Agent]
num_agents=1
optimizer_function='Adam'
learning_rate=0.0003


;  for DQN
[Network]
network = {'layers': [512, 256, 128], 'activation_function': ["ReLU", "ReLU", "ReLU"], 'output_function': None, 'last_layer': True}
;  for DDPG
; [Network]
; actor = {'layers': [400, 300], 'activation_function': ['ReLU', 'ReLU'], 'output_function': None, 'last_layer': True}
; critic_head = {'layers': [400], 'activation_function': ['ReLU'], 'output_function': None, 'last_layer': False}
; critic_tail = {'layers': [300], 'activation_function': ['ReLU'], 'output_function': None, 'last_layer': True}

[Admin]
save                = True
traceback           = True
directory           = {'runs': '/runs'}


[ImageProcessing]


[VideoProcessing]


