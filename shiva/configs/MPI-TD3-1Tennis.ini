; Test config for DQN
; NOTE: options within sections cannot have the same names
; some options are repeating, we need to get rid of duplicates



[MetaLearner]
type='MPIMetaLearner'
start_mode="production"
optimize_env_hp=False
optimize_learner_hp=False
evolution=False
num_menvs = 1
num_learners = 2

[Learner]
type=''
using_buffer=True
episodes=2000
load_agents= False
save_checkpoint_episodes = 300
episodes_to_update = 1

[Algorithm]
type                        = "TD3Algorithm"
manual_seed                 = 5
update_iterations           = 4
loss_function               = 'MSELoss'
; c is the number of steps needed to update target nets
c                           = 1000
; gamma is the discount rate
gamma                       = 0.9999
actor_soft_update           = 0.01
critic_soft_update          = 0.01
actor_grad_clip_norm        = None
critic_grad_clip_norm       = None

[Environment]
type='MultiAgentUnityWrapperEnv'
num_instances = 1
episode_max_length = 30
exec='shiva/envs/unitybuilds/12/Tennis-12_Mac/Tennis.app'
env_name = 'Tennis'
;exec='shiva/envs/unitybuilds/12/Basic-12_Linux/Basic.x86_64'
train_mode = True
render=False
port = 5010
unity_configs = { 'time_scale': 40 }
unity_props = { }

[Buffer]
type = 'TensorBuffer.MultiAgentTensorBuffer'
capacity = 100000
batch_size = 128
num_agents=1

[Agent]
manual_seed         = 5
optimizer_function  = 'Adam'
eps                 = 1e-4
actor_lr            = 0.0005
critic_lr           = 0.004
critic_2_lr         = 0.003
noise_scale                 = 0.8
noise_mu                    = 0
noise_theta                 = 0.15
noise_sigma                 = 0.25
exploration_steps           = 5000

[Network]
actor = {'layers': [256, 128], 'activation_function': ['ReLU', 'ReLU'], 'output_function': None, 'last_layer': True}
critic = {'layers': [256], 'activation_function': ['ReLU'], 'output_function': None, 'last_layer': True}
critic_2 = {'layers': [256], 'activation_function': ['ReLU'], 'output_function': None, 'last_layer': True}

[Admin]
print_debug         = True
save                = True
traceback           = True
directory           = {'runs': '/runs'}

[ImageProcessing]


[VideoProcessing]
