#!/usr/bin/env python
# encoding: utf-8
from __future__ import print_function

import atexit
import numpy
import os
import time
import signal
import subprocess
import sys

# Global list of all/essential running processes
processes, necProcesses = [], []

# Command to run the rcssserver. Edit as needed; the below assumes running in the same directory as HFO
SERVER_BIN = 'rcssserver'
# Command to run the monitor. Edit as needed; ditto to the above re directories.
MONITOR_BIN = 'soccerwindow2'

def cleanup():
  """Cleanup even if doing SystemExit, as with term."""
  for p in reversed(processes):
    p.terminate()
    time.sleep(0.1)
    p.kill()

def term(received_signal, ignored_stack):
  sys.exit("Signal {0!r} received; exiting".format(received_signal))

def launch(cmd, name = 'Unknown', necessary = True, suppressOutput = True):
  """Launch a process.

  Appends to list of processes and (optionally) necProcesses if
  necessary flag is True.

  Returns: The launched process.
  """
  kwargs = {}
  if suppressOutput:
    kwargs = {'stdout': open(os.devnull, 'w'),
              'stderr': open(os.devnull, 'w')}
  try:
    p = subprocess.Popen(cmd.split(' '), shell = False, **kwargs)
  except (IOError, OSError):
    print("ERROR: Unsuccessful launch of process {!r}".format(cmd), file=sys.stderr)
    raise
  processes.append(p)
  if necessary:
    necProcesses.append([p,name])
  return p

def main(args):
  """Sets up the teams, launches the server and monitor, starts the trainer.
  """
  if args.logging:
    args.hfo_logging = True
    if not os.path.exists(args.logDir):
      os.makedirs(args.logDir)
  elif args.hfo_logging and not os.path.exists(args.logDir):
    os.makedirs(args.logDir)
  num_agents   = args.offenseAgents + args.defenseAgents
  binary_dir   = os.path.dirname(os.path.realpath(__file__))
  server_port  = args.port
  coach_port   = args.port + 1
  olcoach_port = args.port + 2
  serverCommand = os.path.join(binary_dir, SERVER_BIN)
  serverOptions = ' server::port=%i server::coach_port=%i ' \
                  'server::olcoach_port=%i server::coach=1 ' \
                  'server::game_logging=%i server::text_logging=%i ' \
                  'server::hfo_logging=%i server::hfo_log_dir=%s ' \
                  'server::game_log_dir=%s server::text_log_dir=%s '\
                  'server::synch_mode=%i server::hfo=1 ' \
                  'server::fullstate_l=%i server::fullstate_r=%i ' \
                  'server::coach_w_referee=1 server::hfo_max_trial_time=%i ' \
                  'server::hfo_max_trials=%i server::hfo_max_frames=%i ' \
                  'server::hfo_offense_on_ball=%i server::random_seed=%i ' \
                  'server::hfo_max_untouched_time=%i ' \
                  'server::hfo_min_ball_pos_x=%f ' \
                  'server::hfo_max_ball_pos_x=%f ' \
                  'server::hfo_min_ball_pos_y=%f ' \
                  'server::hfo_max_ball_pos_y=%f ' \
                  'server::agents_min_pos_x=%f ' \
                  'server::agents_max_pos_x=%f ' \
                  'server::agents_min_pos_y=%f ' \
                  'server::agents_max_pos_y=%f ' \
                  'server::increment_every_x_episodes=%i ' \
                  'server::increment_agents_x_pos=%f ' \
                  'server::increment_agents_y_pos=%f ' \
                  'server::increment_ball_x_pos=%f ' \
                  'server::increment_ball_y_pos=%f ' \
                  'server::control_random_initialization=%i ' \
                  'server::say_coach_msg_size=%i ' \
                  'server::record_messages=%i ' \
                  'server::tackle_cycles=%i ' \
                  'server::use_offside=%i ' \
                  'server::offside_active_area_size=%f ' \
                  'server::forbid_kick_off_offside=%i ' \
                  'server::server_log=%i ' \
                  'server::run_imit=%i' \
                  %(server_port, coach_port, olcoach_port,
                    args.logging, args.logging, args.hfo_logging,
                    args.logDir, args.logDir, args.logDir,
                    args.sync, args.fullstate, args.fullstate,
                    args.maxFramesPerTrial, args.numTrials, args.numFrames,
                    args.offenseOnBall, args.seed, args.maxUntouchedTime,
                    args.min_ball_x, args.max_ball_x,
                    args.min_ball_y, args.max_ball_y,
                    args.min_agents_x, args.max_agents_x,
                    args.min_agents_y, args.max_agents_y,
                    args.change_every_x_ep, args.change_agents_x, args.change_agents_y,
                    args.change_balls_x, args.change_balls_y, args.control_rand_init,
                    args.messageSize, args.verbose, args.tackle_cycles, 
                    args.offside, args.offside_area_size, args.forbid_offside_kickoff,
                    args.server_log, args.run_imit)

  if args.deterministic:
    serverOptions += ' server::player_rand=0 ' \
                     'server::ball_rand=0 ' \
                     'server::kick_rand=0 ' \
                     'server::wind_rand=0 '  \
                     'server::tackle_rand_factor=0 ' \
                     'server::foul_detect_probability=0'

  try:
    signal.signal(signal.SIGTERM, term)
  except (ValueError, AttributeError):
    print("Not able to catch sigterm")

  atexit.register(cleanup)

  try:
    # Launch the Server
    server = launch(serverCommand + serverOptions, name='server',
                    suppressOutput=not args.verbose)
    time.sleep(0.2)
    assert server.poll() is None,\
      '[start.py] Failed to launch Server with command: \"%s\"' \
      '\n\nAnother rcssserver may be running on the same port?' \
      '\nTry: \"killall -9 rcssserver\"' \
      %(serverCommand + serverOptions)
    if not args.headless:
      monitorCommand = os.path.join(binary_dir, MONITOR_BIN)
      monitorOptions = ' --connect --port=%i'%(server_port)
      launch(monitorCommand + monitorOptions, name='monitor')
    # Launch the Trainer
    from Trainer import Trainer
    trainer = Trainer(args=args, server_port=server_port, coach_port=coach_port, imit_port=args.imit_port)
    trainer.initComm()
    # Run
    trainer.run(necProcesses, args.offenseTeam, args.defenseTeam)
  except KeyboardInterrupt:
    print('[start.py] Exiting for CTRL-C')
  finally:
    print('[start.py] Cleaning up server and other processes')
    for p in reversed(processes):
      try:
        p.terminate()
        time.sleep(0.1)
        p.kill()
      except:
        pass

def parseArgs():
  import argparse
  team_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'teams')
  installed_teams = os.listdir(team_dir)
  p = argparse.ArgumentParser(description='Start Half Field Offense.',
                              formatter_class=argparse.RawTextHelpFormatter)
  p.add_argument('--headless', dest='headless', action='store_true',
                 help='Run without a monitor.')
  p.add_argument('--trials', dest='numTrials', type=int, default=-1,
                 help='Number of trials to run.\n'\
                 'Negative values mean unlimited. Default: -1.')
  p.add_argument('--frames', dest='numFrames', type=int, default=-1,
                 help='Number of frames to run for.\n'\
                 'Negative values mean unlimited. Default: -1.')
  p.add_argument('--frames-per-trial', dest='maxFramesPerTrial', type=int,
                 default=1000, help='Max number of frames per trial.\n'\
                 'Negative values mean unlimited. Default: 1000.')
  p.add_argument('--untouched-time', dest='maxUntouchedTime', type=int,
                 default=100, help='Ends trial if ball is untouched for this long.\n'\
                'Negative values mean unlimited. Default: 100.')
  p.add_argument('--offense-agents', dest='offenseAgents', type=int, default=0,
                 help='Number of offensive agents. Default: 0.')
  p.add_argument('--defense-agents', dest='defenseAgents', type=int, default=0,
                 help='Number of defensive agents. Default: 0.')
  p.add_argument('--offense-npcs', dest='offenseNPCs', type=int, default=0,
                 help='Number of offensive uncontrolled players. Default: 0.')
  p.add_argument('--defense-npcs', dest='defenseNPCs', type=int, default=0,
                 help='Number of defensive uncontrolled players. Default: 0.')
  p.add_argument('--agent-play-goalie', dest='agentPlayGoalie', action='store_true',
                 default=False, help='Defense-agent plays goalie, rather than defender.')
  p.add_argument('--offense-team', dest='offenseTeam', type=str, default='base',
                 help='Offense team binary. Options: '+str(installed_teams)+'. Default: base.')
  p.add_argument('--defense-team', dest='defenseTeam', type=str, default='base',
                 help='Defense team binary. Options: '+str(installed_teams)+'. Default: base.')
  p.add_argument('--no-sync', dest='sync', action='store_false', default=True,
                 help='Run server in non-sync mode.')
  p.add_argument('--port', dest='port', type=int, default=6000,
                 help='Agent server\'s port. Default: 6000.\n'\
                 'rcssserver, coach, and ol_coach will be '\
                 'incrementally allocated the following ports.')
  p.add_argument('--no-logging', dest='logging', action='store_false',
                 default=True, help='Disable rcssserver logging.')
  p.add_argument('--hfo-logging', dest='hfo_logging', action='store_true', default=False,
                 help="Do .hfo logging even if no other logging")
  p.add_argument('--log-dir', dest='logDir', default='log/',
                 help='Directory to store logs. Default: log/')
  p.add_argument('--record', dest='record', action='store_true',
                 help='Record logs of states and actions.')
  p.add_argument('--offense-on-ball', dest='offenseOnBall', type=int,
                 default=0, help='Ball given to the player represented by the value.\n'\
                 'If value greater than the number of offense players, '\
                 'ball given to a random offense player.\n'\
                 'If value non-positive, ball is not given to any player.\n'\
                 'Default: 0.')
  p.add_argument('--fullstate', dest='fullstate', action='store_true',
                 help='Server provides full-state information to agents.')
  p.add_argument('--seed', dest='seed', type=int, default=-1,
                 help='Seed the server\'s RNG. Default: time.')
  p.add_argument('--message-size', dest='messageSize', type=int, default=1000,
                 help='Message size limit for communication')
  p.add_argument('--ball-x-min', dest='min_ball_x', type=float, default=-0.8,
                 help='Ball initialization min x position: [-1,1]. Default: -0.8')
  p.add_argument('--ball-x-max', dest='max_ball_x', type=float, default=0.8,
                 help='Ball initialization max x position: [-1,1]. Default: 0.8')
  p.add_argument('--ball-y-min', dest='min_ball_y', type=float, default=-0.8,
                 help='Ball initialization min y position: [-1,1]. Default: -0.8')
  p.add_argument('--ball-y-max', dest='max_ball_y', type=float, default=0.8,
                 help='Ball initialization max y position: [-1,1]. Default: 0.8')
  p.add_argument('--agents-x-min', dest='min_agents_x', type=float, default=-0.8,
                 help='Agents initialization min x position: [-1,1]. Default: -0.8')
  p.add_argument('--agents-x-max', dest='max_agents_x', type=float, default=0.8,
                 help='Agents initialization max x position: [-1,1]. Default: 0.8')
  p.add_argument('--agents-y-min', dest='min_agents_y', type=float, default=-0.8,
                 help='Agents initialization min y position: [-1,1]. Default: -0.8')
  p.add_argument('--agents-y-max', dest='max_agents_y', type=float, default=0.8,
                 help='Agents initialization max y position: [-1,1]. Default: 0.8')
  p.add_argument('--change-every-x-ep', dest='change_every_x_ep', type=int, default=5,
                 help='Changes the range of randomization of the ball and agents. Default: 5')
  p.add_argument('--change-agents-x', dest='change_agents_x', type=float, default=0.1,
                 help='Changes agents random range on x: [0,1]. Default: 0.1')
  p.add_argument('--change-agents-y', dest='change_agents_y', type=float, default=0.1,
                 help='Changes agents random range on y: [0,1]. Default: 0.1')
  p.add_argument('--change-balls-x', dest='change_balls_x', type=float, default=0.1,
                 help='Changes balls random range on x: [0,1]. Default: 0.1')
  p.add_argument('--change-balls-y', dest='change_balls_y', type=float, default=0.1,
                 help='Changes balls random range on y: [0,1]. Default: 0.1')
  p.add_argument('--control-rand-init', dest='control_rand_init', action='store_true',
                 default=False, help='Allows control over the randomization of the field')
  p.add_argument('--verbose', dest='verbose', action='store_true',
                 default=False, help='Print verbose output.')
  p.add_argument('--deterministic', dest='deterministic', action='store_true',
                 default=True, help='Make environment deterministic.')
  p.add_argument('--tackle-cycles', dest='tackle_cycles', type=int, default=0,
                  help='Change tackle cycle. Default: 0')
  p.add_argument('--no-offside', dest='offside', action='store_false',
                  default=True, help='Enable or disable offside')
  p.add_argument('--offside-area-size', dest='offside_area_size', type=float,
                  default=0, help='Offside area size')
  p.add_argument('--allow-offside-kickoff', dest='forbid_offside_kickoff', action='store_false',
                    default=True, help='allow offside kickoff')
  p.add_argument('--log-gen-pt', dest='server_log', action='store_true',
                    help='allow logging of general pre-training')
  p.add_argument('--imit-port', dest='imit_port', type=int, default=None, help='port to talk with main process')
  p.add_argument('--run-imit', dest='run_imit', action='store_true', default=False, help='option to run imitation')

  args = p.parse_args()
  if args.offenseAgents not in list(range(0, 12)):
    p.error('argument --offense-agents: invalid choice: '\
            + str(args.offenseAgents) + ' (choose from [0-10])')
  if args.offenseNPCs not in list(range(0, 12)):
    p.error('argument --offense-npcs: invalid choice: '\
            + str(args.offenseNPCs) + ' (choose from [0-10])')
  if args.defenseAgents not in list(range(0, 12)):
    p.error('argument --defense-agents: invalid choice: '\
            + str(args.defenseAgents) + ' (choose from [0-11])')
  if args.defenseNPCs not in list(range(0, 12)):
    p.error('argument --offense-npcs: invalid choice: '\
            + str(args.defenseNPCs) + ' (choose from [0-11])')
  if args.offenseAgents + args.offenseNPCs not in list(range(0, 12)):
    p.error('Offense players (offense-agents + offense-npcs): '\
            'invalid choice: ' + str(args.offenseAgents + args.offenseNPCs) +\
            ' (choose from [1,10])')
  if args.defenseAgents + args.defenseNPCs not in list(range(0, 12)):
    p.error('Defense players (defense-agents + defense-npcs): '\
            'invalid choice: ' + str(args.defenseAgents + args.defenseNPCs) +\
            ' (choose from [0,11])')
  if args.offenseTeam not in installed_teams:
    p.error('Unrecognized offense team: ' + str(args.offenseTeam))
  if args.defenseTeam not in installed_teams:
    p.error('Unrecognized defense team: ' + str(args.defenseTeam))
  if args.agentPlayGoalie and args.defenseAgents <= 0:
    p.error('You must add a --defense-agent before it can play goalie.')
  return args

if __name__ == '__main__':
  main(parseArgs())
